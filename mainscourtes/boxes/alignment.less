/*=============================================>>>>>
= Alignements =
===============================================>>>>>*/

/**
 * Sets the distribution of space between
 * and around content items along a flexbox's cross-axis.
 *
 * normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>
 */

.align-content(@position: center) {
	-webkit-align-content: @position;
	-ms-flex-line-pack: @position;
	align-content: @position;
}

/* ----------------------------------------------- */

/**
 * Sets the align-self value on all direct
 * children as a group. In Flexbox, it controls
 * the alignment of items on the Cross Axis.
 *
 * normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]
 */

.align-items(@position: center) {
	-moz-box-align: @position;
	-ms-flex-align: @position;
	-webkit-align-items: @position;
	-webkit-box-align: @position;
	align-items: @position;
}

/* ----------------------------------------------- */

/**
 * Overrides a grid or flex item's align-items value.
 *
 * normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]
 */

.align-self(@position: center) {
	-ms-flex-item-align: @position;
	-ms-grid-row-align: @position;
	-webkit-align-self: @position;
	align-self: @position;
}


/*=============================================>>>>>
= Justifications =
===============================================>>>>>*/

/**
 * Defines how the browser distributes space
 * between and around content items along
 * the main-axis of a flex container
 *
 * normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]
 */

.justify-content(@position: center) {
	-moz-box-pack: @position;
	-ms-flex-pack: @position;
	-webkit-box-pack: @position;
	-webkit-justify-content: @position;
	justify-content: @position;
}

/* ----------------------------------------------- */

/**
 * Defines the default justify-self for all items of the box, giving them all a default way of justifying each box along the appropriate axis.
 *
 * normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ] | legacy | legacy && [ left | right | center ]
 */

.justify-items(@position) {
	justify-items: @position;
}

/* ----------------------------------------------- */

/**
 * Sets the way a box is justified inside
 * its alignment container along the appropriate
 * axis.
 *
 * auto | normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ]
 */

.justify-self(@center: center) {
	-ms-grid-column-align: @center;
	justify-self: @center;
}


/*=============================================>>>>>
= Placements =
===============================================>>>>>*/

/**
 *
 * Shorthand property allowing to align
 * content along both the block and inline
 * directions at once.
 *
 * <'align-content'> <'justify-content'>?
 */

.place-content(@align, @justify) {
	place-content: @arguments;
}

/* ----------------------------------------------- */

/**
 * Shorthand property allowing to align
 * items along both the block and inline
 * directions at once.
 *
 * <'align-items'> <'justify-items'>?
 */

.place-items(@align, @justify) {
	place-items: @arguments;
}

/* ----------------------------------------------- */

/**
 * Shorthand property allows you to align
 * an individual item in both the block
 * and inline directions at once.
 *
 * <'align-self'> <'justify-self'>?

 */

.place-self(@align, @justify) {
	-ms-grid-row-align: @position;
	-ms-grid-column-align: @position;
	place-self: @arguments;
}
