
/*=============================================>>>>>
= FLEXBOX =
===============================================>>>>>*/

.display-flex() {
	display: -webkit-box;
	display: -webkit-flex;
	display: -moz-box;
	display: -ms-flexbox;
	display: flex;
}

/*----------- Direction & Wrapping -----------*/

/**
 * Sets how flex items are placed in the flex
 * container defining the main axis and the direction
 * (normal or reversed).
 *
 *	row | row-reverse | column | column-reverse
 */

.flex-direction(@direction: column) {
	-ms-flex-direction: @direction;
	-webkit-box-direction: normal;
	-webkit-box-orient: vertical;
	-webkit-flex-direction: @direction;
	flex-direction: @direction;
}

/* ----------------------------------------------- */

/**
 *
 * Sets whether flex items are forced onto one line
 * or can wrap onto multiple lines. If wrapping is allowed,
 * it sets the direction that lines are stacked.
 *
 * nowrap | wrap | wrap-reverse
 */

.flex-wrap(@wrap: wrap) {
	-ms-flex-wrap: @wrap;
	-webkit-flex-wrap: @wrap;
	flex-wrap: @wrap;
}

/* ----------------------------------------------- */

/**
 *
 * Specifies the direction of a flex container,
 * as well as its wrapping behavior.
 * This property is a shorthand for the following
 * CSS properties: flex-direction | flex-wrap
 *
 * <'flex-direction'> || <'flex-wrap'>
 */

.flex-flow(@direction, @wrap) {
	-webkit-box-orient: horizontal;
	-webkit-box-direction: normal;
	-webkit-flex-flow: @arguments;
	-moz-box-orient: horizontal;
	-moz-box-direction: normal;
	-ms-flex-flow: @arguments;
	flex-flow: @arguments;
}

/* ----------------------------------------------- */


.align-content(@center: center) {
	-webkit-align-content: @center;
	-ms-flex-line-pack: @center;
	align-content: @center;
}

.align-items(@align: center) {
	-moz-box-align: @align;
	-ms-flex-align: @align;
	-webkit-align-items: @align;
	-webkit-box-align: @align;
	align-items: @align;
}

.justify-content(@justify: center) {
	-moz-box-pack: @justify;
	-ms-flex-pack: @justify;
	-webkit-box-pack: @justify;
	-webkit-justify-content: @justify;
	justify-content: @justify;
}

.order(@number) {
	-moz-box-ordinal-group: @number;
	-ms-flex-order: @number;
	-webkit-box-ordinal-group: @number;
	-webkit-order: @number;
	order: @number;
}

/*----------- Positions and placements -----------*/

/**
 *
 * Sets the initial main size of a flex item.
 * It sets the size of the content box unless
 * otherwise set with box-sizing.
 *
 * The flex-basis property is specified as either
 * the keyword content or a <'width'>.
 *
 * Intrinsic sizing keywords are not yet fully supported.
 */

.flex-basis(@width) {
	-webkit-flex-basis: @width;
	-ms-flex-preferred-size: @width;
	flex-basis: @width;
}

/* ----------------------------------------------- */

/**
 *
 * Sets the flex grow factor of a flex item main size.
 * The flex-grow property is specified as a single <number>.
 * This property specifies how much of the remaining space
 * in the flex container should be assigned to the item
 * (the flex grow factor).
 *
 */

.flex-grow(@number) {
	-ms-flex-positive: @number;
	-webkit-box-flex: @number;
	-webkit-flex-grow: @number;
	flex-grow: @number;
}

/* ----------------------------------------------- */

/**
 *
 * Sets the flex shrink factor of a flex item.
 * If the size of all flex items is larger than
 * the flex container, items shrink to fit according
 * to flex-shrink.
 *
 * The flex-shrink property is specified as a single <number>.
 */

.flex-shrink(@number) {
	-ms-flex-negative: @number;
	-webkit-flex-shrink: @number;
	flex-shrink: @number;
}

/* ----------------------------------------------- */


.align-self(@align: center) {
	-ms-flex-item-align: @align;
	-ms-grid-row-align: @align;
	-webkit-align-self: @align;
	align-self: @align;
}

.justify-self(@center: center) {
	-ms-grid-column-align: @center;
	justify-self: @center;
}

/**
 * display en flex, avec le maximum de paramètres.
 *
 * @wrap : Permet d'activer le flew-wrap.
 * Réponses valables : nowrap | wrap | wrap-reverse.
 * Pour laisser null : 0.
 *
 * @direction: Permet d'activer flex-direction.
 * Réponses valables : row | row-reverse | column | column-reverse.
 * Pour laisser null : 0.
 *
 * @align : Permet de positionner les éléments en abscisse.
 * Réponses valables : flex-start | flex-end | center | baseline | stretch.
 * Pour laisser null : 0.
 *
 * @justify: Permet de positionner les éléments en ordonées
 * Réponses valables : flex-start | flex-end | center | space-between | space-around | space-evenly.
 * Pour laisser null : 0.
 */

.flex(@wrap : 0, @direction : 0, @align-items : 0, @justify : 0, @align-content : 0) {
	.display-flex();

	& when(iskeyword(@wrap)) {
		.flex-wrap(@wrap);
	}

	& when(iskeyword(@direction)) {
		.flex-direction(@direction);
	}

	& when(iskeyword(@align-items)) {
		.align-items(@align-items);
	}

	& when(iskeyword(@justify)) {
		.justify-content(@justify);
	}

	& when(iskeyword(@align-content)) {
		.align-content(@align-content);
	}
}

.centered(@wrap : 0, @direction : 0, @align-content : 0) {
	.flex(@wrap, @direction, center, center, @align-content);
}

.baselined(@wrap : 0, @direction : 0, @align-content : 0) {
	.flex(@wrap, @direction, center, baseline, @align-content);
}

.fluid(@wrap : 0, @direction : 0) {
	.flex(@wrap, @direction, normal, normal, normal);
}

//<DEPRECIATED

.displayFlex() {
	.display-flex();
}

.flexWrap(@wrap: wrap) {
	.flex-wrap(@wrap);
}

.flexNoWrap() {
	.flex-wrap(nowrap);
}

//DEPRECIATED>


/*= End of FLEXBOX =*/
/*=============================================<<<<<*/
